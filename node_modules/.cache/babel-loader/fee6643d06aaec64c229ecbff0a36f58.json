{"ast":null,"code":"'use strict';\n\nvar Transform = require('stream').Transform || require('readable-stream').Transform;\n\nvar crypto = require('crypto');\n\nvar fs = require('graceful-fs');\n\nexports.check = check;\nexports.checkSync = checkSync;\nexports.get = get;\nexports.getSync = getSync;\nexports.stream = stream;\n\nfunction check(file, expected, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = undefined;\n  }\n\n  expected = expected.toLowerCase().trim();\n  get(file, options, function (er, actual) {\n    if (er) {\n      if (er.message) er.message += ' while getting shasum for ' + file;\n      return cb(er);\n    }\n\n    if (actual === expected) return cb(null);\n    cb(new Error('shasum check failed for ' + file + '\\n' + 'Expected: ' + expected + '\\n' + 'Actual:   ' + actual));\n  });\n}\n\nfunction checkSync(file, expected, options) {\n  expected = expected.toLowerCase().trim();\n  var actual;\n\n  try {\n    actual = getSync(file, options);\n  } catch (er) {\n    if (er.message) er.message += ' while getting shasum for ' + file;\n    throw er;\n  }\n\n  if (actual !== expected) {\n    var ex = new Error('shasum check failed for ' + file + '\\n' + 'Expected: ' + expected + '\\n' + 'Actual:   ' + actual);\n    throw ex;\n  }\n}\n\nfunction get(file, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  var algorithm = options.algorithm || 'sha1';\n  var hash = crypto.createHash(algorithm);\n  var source = fs.createReadStream(file);\n  var errState = null;\n  source.on('error', function (er) {\n    if (errState) return;\n    return cb(errState = er);\n  }).on('data', function (chunk) {\n    if (errState) return;\n    hash.update(chunk);\n  }).on('end', function () {\n    if (errState) return;\n    var actual = hash.digest(\"hex\").toLowerCase().trim();\n    cb(null, actual);\n  });\n}\n\nfunction getSync(file, options) {\n  options = options || {};\n  var algorithm = options.algorithm || 'sha1';\n  var hash = crypto.createHash(algorithm);\n  var source = fs.readFileSync(file);\n  hash.update(source);\n  return hash.digest(\"hex\").toLowerCase().trim();\n}\n\nfunction stream(expected, options) {\n  expected = expected.toLowerCase().trim();\n  options = options || {};\n  var algorithm = options.algorithm || 'sha1';\n  var hash = crypto.createHash(algorithm);\n  var stream = new Transform();\n\n  stream._transform = function (chunk, encoding, callback) {\n    hash.update(chunk);\n    stream.push(chunk);\n    callback();\n  };\n\n  stream._flush = function (cb) {\n    var actual = hash.digest(\"hex\").toLowerCase().trim();\n    if (actual === expected) return cb(null);\n    cb(new Error('shasum check failed for:\\n' + '  Expected: ' + expected + '\\n' + '  Actual:   ' + actual));\n    this.push(null);\n  };\n\n  return stream;\n}","map":null,"metadata":{},"sourceType":"script"}